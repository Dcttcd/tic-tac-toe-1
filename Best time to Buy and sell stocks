class Solution {
public:
          long long int dp[30004][2];
          int rec(int i,int store,vector<int>&nums)
          {
                  if (i>=nums.size()) return 0;
                  int buy=0,sell=0,nien=0;
                  if(dp[i][store] != -1 ) return dp[i][store];
                  if (store)
                  {
                        nien =             rec(i+1,1,nums);
                        sell = (-nums[i]) + rec(i+1,0,nums);
                  }
                  else 
                  {
                        nien =   rec(i+1,0,nums);
                        buy  =   nums[i]+rec(i+1,1,nums);
                  }
                  // cout<<max({buy,sell,nien})<<" ";
                  return dp[i][store]=max({buy,sell,nien});
          }
    int maxProfit(vector<int>& prices) {
            memset(dp,-1,sizeof(dp));
            // vector<vector<int>>dp(prices.size(),vector<int>(2,-1));
            return rec(0,1,prices);
    }
};
