class Solution {
public:
          int dp[201][201];
         int    rec(int i,int j,vector<vector<int>>& grid)
        {
                if (i==0&&j==0) return grid[0][0];
                if (i<0||j<0) return 100000;
                if (dp[i][j]!=-1) return dp[i][j];
                int pick =   grid[i][j] + rec(i-1,j,grid);
                int picky =  grid[i][j] + rec(i,j-1,grid);
                return dp[i][j]=min(pick,picky);
        }
    int minPathSum(vector<vector<int>>& grid) {
              memset(dp,-1,sizeof(dp));
            // if (grid.size()==1)
              return rec(grid.size()-1,grid[0].size()-1,grid);
    }
};
